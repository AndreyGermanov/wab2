<?php

/*
 * Класс, реализующий интерфейсный объект "Меню"
 * 
 * Меню это набор элементов. Меню бывает вертикальным или горизонтальным. Если
 * свойство horisontal=true, значит меню горизонтальное.
 * 
 * Меню состоит из элементов. Каждый элемент это ячейка в таблице, которая
 * отображает меню. Каждый элемент состоит из изображения и текста. Изображение
 * не является обязательным. Также, для каждого элемента может указываться
 * набор свойств, который вставляются как набор атрибутов тэга <td> данного
 * элемента. У элемента есть идентификатор (поле id), который должен быть 
 * уникален.
 * 
 * Каждый элемент реагирует на события onclick, oncontextmenu, onmouseover и
 * onmouseout при условии, что в объекте меню определены обработчики для данного
 * объекта в формате id_onClick, id_onMouseOver, id_onMouseOut, id_onContextMenu.
 * 
 * Обработчики прикрепляются к тэгу <td>, к изображению (если есть) 
 * 
 * В клиентском коде меню представляет из себя массив items[], каждый элемент
 * которого является массивом:
 * 
 * items[0]["id"] - идентификатор элемента
 * items[0]["text"] - текст элемента
 * items[0]["image"] - изображение элемента
 * items[0]["properties"] - дополнительные атрибуты тэга <td>
 * items[0]["image_properties] - дополнительные атрибуты тэга <img>
 * items[0]["node"] - ссылка на тэг <td> элемента
 * 
 * Меню собирается из элементов методом build(), который изначально строит массив
 * из свойства {data}, которое представляет меню в виде строки с разделителями
 * в формате: id~text~image~properties~image_properties|.... Также при сборке меню
 * используется свойство table_properties, в котором определены дополнительные
 * атрибуты тэга <table>, представляющего меню и свойство properties, которое
 * определяет дополнительные атрибуты самого тэга <div>, представляющий объект.
 * Это могут быть в частности параметры размещения меню на экране. Атрибуты
 * передаются в формате атрибут=значение,атрибут=значение. 
 * 
 *  
 * Также у меню есть массив subMenus, элементами которого являются объекты
 * Menu, которые логически связаны с этим элементом в качестве подменю. Подменю
 * добавляется, например, при вызове метода showSubMenu, в который передается
 * идентификатор подменю, которое нужно отображать. В этом случае подменю
 * отображается (вызывается его метод build() и затем show()) и сразу записывается
 * в мессив subMenus. При это у этого меню устанавливается свойство parent_object_id
 * в идентификатор данного меню.  этого момента данное меню считается дочерним.
 * Одновременно отображаться на экране может только одно
 * меню из массива subMenus, поэтому при отображении подменю все остальные
 * подменю скрываются. При щелчке мышью на экране, генерируется событие MOUSE_CLICKED,
 * на что меню скрывается и генерует событие MENU_HIDED, в которое передается
 * имя меню в качестве object_id. Все подменю данного меню делают
 * то же самое, то есть, скрывают себя и генерируют событие MENU_HIDED для
 * своих подменю.
 */
class Menu extends WABEntity {
    
    function construct($params) {
        if (count($params)>2)
            $this->module_id = array_shift($params)."_".array_shift($params);
        else
            $this->module_id = "";
        $this->name = implode("_",$params);
        $this->template = "templates/interface/Table.html";
        global $Objects;
        $app = $Objects->get("Application");
        if (!$app->initiated)
            $app->initModules();
        $this->skinPath = $app->skinPath;
        $this->css = $this->skinPath."styles/Menu.css";
        $this->handler = "scripts/handlers/interface/Menu.js";
        
        $this->table_properties = "cellpadding=5";
        $this->properties = "class=".$this->getId()."_menu^style=display:none";
        $this->width="";
        $this->horizontal = "false";   
    }
    
    function getId() {
        if ($this->module_id!="")
            return get_class($this)."_".$this->module_id."_".$this->name;
        else
            return get_class($this)."_".$this->name;
    }   
}
?>